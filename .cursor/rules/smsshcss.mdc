---
description: 
globs: 
alwaysApply: false
---
# SmsshCSS プロジェクト規則

## プロジェクト概要
- **プロジェクト**: SmsshCSS - 軽量ユーティリティファーストCSSフレームワーク
- **構造**: TypeScript製モノレポ（Turbo + Yarn Workspaces）
- **コンセプト**: フィボナッチ数列ベースのスペーシングシステムを持つCSSユーティリティフレームワーク

## 技術スタック
- **言語**: TypeScript (strict mode), JavaScript
- **モジュールシステム**: CommonJS, ES Modules
- **ビルドツール**: Turbo, tsup, Vite
- **パッケージマネージャー**: Yarn v4.5.0
- **Node.js**: v20.18.0 (Volta管理)
- **テスト**: Vitest
- **リント**: ESLint + TypeScript ESLint, Prettier
- **Git hooks**: Husky + lint-staged
- **コミット規約**: Conventional Commits

## コーディング規則

### TypeScript
- 厳格な型定義を必須とする
- `@typescript-eslint/explicit-function-return-type`: 関数の戻り値型を明示
- `@typescript-eslint/no-explicit-any`: `any`型の使用禁止
- `@typescript-eslint/no-unused-vars`: 未使用変数の禁止（`_`プレフィックスは除く）
- 全てのエクスポート関数にJSDocコメントを記述
- 型定義ファイル（.d.ts）を適切に生成・管理

### CSS/スタイリング
- フィボナッチ数列ベースのスペーシングシステムを維持:
  - `2xs`: 4px, `xs`: 8px, `sm`: 12px, `md`: 20px, `lg`: 32px, `xl`: 52px, `2xl`: 84px...
- ユーティリティクラスの命名規則:
  - 方向: `t`(top), `r`(right), `b`(bottom), `l`(left), `x`(horizontal), `y`(vertical)
  - プロパティ: `m`(margin), `p`(padding), `gap`
  - 任意値: `[値]` 形式をサポート
- CSS関数（calc, min, max, clamp）のサポートを考慮した実装

### ファイル構造
- モノレポ構造を維持:
  - `packages/smsshcss/`: メインパッケージ
  - `packages/@smsshcss/vite/`: Viteプラグイン
  - `playground/`: 動作確認用環境
  - `docs/`: ドキュメント
- 各パッケージに独自の`package.json`, `tsconfig.json`を配置
- ルートレベルでのワークスペース管理

### 命名規則
- **ファイル**: kebab-case (`css-generator.ts`, `vite-plugin.ts`)
- **関数/変数**: camelCase (`generateCSS`, `purgeOptions`)
- **型/インターフェース**: PascalCase (`SmsshCSSConfig`, `PurgeOptions`)
- **定数**: SCREAMING_SNAKE_CASE (`DEFAULT_SPACING`, `FIBONACCI_VALUES`)
- **クラス名**: kebab-case (`m-md`, `p-lg`, `gap-xl`)

### エラーハンドリング
- 設定ファイル解析エラーを適切にハンドル
- CSS生成時のエラーを詳細にレポート
- Vite/PostCSSプラグインでの警告/エラーを適切に表示

### パフォーマンス考慮
- CSS パージ機能の最適化
- 使用されていないユーティリティクラスの除去
- ビルド時間の最適化（並列処理、キャッシュ活用）
- メモリ使用量の最小化

## 開発ワークフロー

### コミット規則
- Conventional Commits に従う
- `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:` プレフィックスを使用
- 日本語でのコミットメッセージも許可

### テスト
- 新機能は必ずテストケースを追加
- CSS生成ロジックの単体テスト
- Vite/PostCSSプラグインの統合テスト
- エッジケース（任意値、複雑なCSS関数）のテスト

### ドキュメント
- APIの変更は必ずREADME.mdを更新
- 新しいユーティリティクラスの追加時は使用例を記載
- TypeScriptの型定義にコメントを追加

## 新機能開発時の注意点

### CSS ユーティリティ追加時
- フィボナッチベースのスペーシングシステムとの整合性を確認
- 既存のクラス名との競合をチェック
- パージ機能での適切な検出を確認
- レスポンシブ対応（ブレークポイント対応）を考慮

### プラグイン開発時
- Vite/PostCSSの最新APIとの互換性を維持
- 設定オプションの後方互換性を保持
- エラーメッセージの分かりやすさを重視
- Hot Module Replacement (HMR) への対応

### パフォーマンス改善時
- ベンチマークテストの実装
- メモリリーク防止
- 大量のHTMLファイル処理時の最適化

## コードレビュー観点
- 型安全性の確保
- パフォーマンスへの影響
- 後方互換性の維持
- テストカバレッジの確認
- ドキュメントの更新状況
- ESLint/Prettierルールの遵守

## 禁止事項
- `any`型の使用
- console.log の本番コードへの残留
- 破壊的変更（セマンティックバージョニング遵守）
- ハードコードされた設定値
- 非同期処理でのエラーハンドリング漏れ

## 推奨事項
- 関数型プログラミングアプローチの採用
- イミュータブルなデータ操作
- 純粋関数の実装を心がける
- 適切な抽象化レベルの維持
- 再利用可能なユーティリティ関数の作成 