name: Release

on:
  push:
    branches: [master, main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install

      - name: Lint
        run: yarn lint

      - name: Type check
        run: yarn type-check

      - name: Run tests
        run: yarn test

      - name: Build packages
        run: yarn build

      - name: Check if version changed
        id: version-check
        run: |
          # Get current versions from package.json
          SMSSHCSS_VERSION=$(node -p "require('./packages/smsshcss/package.json').version")
          VITE_VERSION=$(node -p "require('./packages/@smsshcss/vite/package.json').version")

          # Get published versions from npm
          PUBLISHED_SMSSHCSS_VERSION=$(npm view smsshcss version 2>/dev/null || echo "0.0.0")
          PUBLISHED_VITE_VERSION=$(npm view @smsshcss/vite version 2>/dev/null || echo "0.0.0")

          echo "Current smsshcss version: $SMSSHCSS_VERSION"
          echo "Current @smsshcss/vite version: $VITE_VERSION"
          echo "Published smsshcss version: $PUBLISHED_SMSSHCSS_VERSION"
          echo "Published @smsshcss/vite version: $PUBLISHED_VITE_VERSION"

          # Check if versions match published versions
          if [ "$SMSSHCSS_VERSION" != "$PUBLISHED_SMSSHCSS_VERSION" ] || [ "$VITE_VERSION" != "$PUBLISHED_VITE_VERSION" ]; then
            # If either version is different from published, check if they match each other
            if [ "$SMSSHCSS_VERSION" != "$VITE_VERSION" ]; then
              echo "Error: Version mismatch between smsshcss ($SMSSHCSS_VERSION) and @smsshcss/vite ($VITE_VERSION)"
              exit 1
            fi
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$SMSSHCSS_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish smsshcss to npm
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          cd packages/smsshcss
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update @smsshcss/vite dependencies for publishing
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          cd packages/@smsshcss/vite
          # Replace workspace:* with actual version
          sed -i 's/"smsshcss": "workspace:\*"/"smsshcss": "^${{ steps.version-check.outputs.new-version }}"/g' package.json
          cat package.json

      - name: Publish @smsshcss/vite to npm
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          cd packages/@smsshcss/vite
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version-check.outputs.new-version }}" -m "Release v${{ steps.version-check.outputs.new-version }}"
          git push origin "v${{ steps.version-check.outputs.new-version }}"

      - name: Generate changelog
        if: steps.version-check.outputs.version-changed == 'true'
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create changelog content
          CHANGELOG="## Changes in v${{ steps.version-check.outputs.new-version }}

          $COMMITS

          ## Packages

          - \`smsshcss@${{ steps.version-check.outputs.new-version }}\`
          - \`@smsshcss/vite@${{ steps.version-check.outputs.new-version }}\`

          ## Installation

          \`\`\`bash
          # npm
          npm install smsshcss @smsshcss/vite

          # yarn
          yarn add smsshcss @smsshcss/vite
          \`\`\`"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version-check.outputs.version-changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.new-version }}
          release_name: Release v${{ steps.version-check.outputs.new-version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Notify success
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          echo "‚úÖ Successfully released v${{ steps.version-check.outputs.new-version }}"
          echo "üì¶ Packages published to npm"
          echo "üè∑Ô∏è Git tag created"
          echo "üìù GitHub release created"
